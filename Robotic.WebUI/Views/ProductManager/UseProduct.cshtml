@model Robotic.Core.Models.Product

@{
    ViewBag.Title = "AddQuantity";
}
<center>
    <div class="jumbotron" style="background-color:#FFFFFF">
        <a href='@Url.Action("Index", "Home", new { area = "" })'>
            <img src="~/Content/Images/SmartBusinessSolutions_Logo_1x.png" />
        </a>
    </div>
</center>

<h2>ใช้ไม้ผลิต</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.No, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PurchaseID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 form-control-static">
            @Html.DisplayFor(model => model.PurchaseID, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.PurchaseID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PurchaseID, new { htmlAttributes = new { @class = "form-control", maxlength = "30" } })
            @Html.ValidationMessageFor(model => model.PurchaseID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 form-control-static">
            @Html.DisplayFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Color_Principle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 form-control-static">
            @Html.DisplayFor(model => model.Color_Principle, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Color_Principle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Color_Principle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Color_Principle, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Grain, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Grain, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Grain, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Thickness, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 form-control-static">
            @Html.DisplayFor(model => model.Thickness, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Thickness, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Thickness, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Thickness, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Dimention_Weight, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Dimention_Weight, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Dimention_Weight, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Dimention_Height, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Dimention_Height, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Dimention_Height, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Quantity, "จำนวน", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 form-control-static">
            @Html.DisplayFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Quantity)
        </div>
    </div>

    <div class="form-group">
        <div align="center">
            @*<input type="submit" value="ใช้ไม้" class="btn btn-default" />*@
            <a class="btn btn-default" data-toggle="modal" data-target=".bootstrapmodal">ใช้ไม้</a>
            <div class="modal fade bootstrapmodal">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-heaader">
                            <button data-dismiss="modal" class="close"><span>&times;</span></button>
                            <div class="modal-title">SBS</div>
                        </div>
                        <div class="modal-body">
                            <p>ยืนยันการใช้?</p>
                        </div>
                        <div class="modal-footer">
                            <input type="submit" value="ใช้ไม้" class="btn btn-default" />
                        </div>

                    </div>
                </div>
            </div>
            @Html.ActionLink("กลับ", "Index", null, new { @type = "submit", @class = "btn btn-default" })
        </div>
    </div>
    
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
